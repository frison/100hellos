name: "Publish Image to Dockerhub"
description: "Publish to dockerhub with multiplatform support"

inputs:
  dockerhub-username:
    description: "The dockerhub username to authenticate with and push the image to"
    required: true
  dockerhub-token:
    description: "The dockerhub token to authenticate with and push the image to"
    required: true
  language:
    description: "The language to build an image for"
    required: true
  platforms:
    description: "The platforms to build the image for"
    required: true
  test:
    description: "Whether to run tests"
    required: true
    default: "true"
  publish:
    description: "Whether to publish images"
    required: true
    default: "false"
runs:
  using: "composite"
  steps:
    # https://github.com/docker/login-action
    -
      name: 🗝 Log into Dockerhub
      id: login
      uses: docker/login-action@v2
      with:
        username:  ${{ inputs.dockerhub-username }}
        password:  ${{ inputs.dockerhub-token }}

    # Add support for more platforms with QEMU (optional)
    # https://github.com/docker/setup-qemu-action
    # This is an architecture emulator that claims to provide near-native speeds for multi-arch builds, however
    # build rails for arm64 on an amd64 machine timed out after 6 hours -- so I'm not convinced I believe that claim.
    -
      name: 🛠 Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: ${{ inputs.platforms }}

    -
      name: 🛠 Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        platforms: ${{ inputs.platforms }}

    -
      name: ✏️ + 🐳 Create Multistage Dockerfile
      id: base
      shell: bash
      run: |
        make composite-dockerfile > /dev/null

    # https://github.com/docker/build-push-action
    -
      name: 🔨 + 🔄 - ${{ inputs.build-target }} (${{ inputs.platforms }})
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile.composite
        target: o100hellos_${{ inputs.language }}
        platforms: ${{ inputs.platforms }}
        load: true
        tags: ${{ inputs.dockerhub-username }}/${{ inputs.language }}:local
        cache-to: |
          type=gha,mode=max
        cache-from: |
          type=gha,mode=max
          type=registry,ref=${{ inputs.dockerhub-username }}/${{ inputs.language }}:latest,mode=max

    -
      name: 🏃 Run Image
      if: ${{ inputs.test == 'true' }}
      continue-on-error: false
      shell: bash
      run: |
        docker run --rm ${{ inputs.dockerhub-username }}/${{ inputs.language }}:local

    # https://github.com/docker/metadata-action
    -
      name: 🐳 Generate Image Metadata
      if: ${{ inputs.publish == 'true' }}
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ inputs.dockerhub-username }}/${{ inputs.language }}
        tags: |
          # On main: push `[:lang directory:]:latest.
          # On schedule: push `[:lang directory:]:YYYYMMDD`.
          # Always: push `[:lang directory:]:edge`.
          # On tag: push `[:lang directory:]:[:tag]`.
          # Always: push `[:lang directory:]:[:short_sha (7 chars)]`.
          type=raw,value=latest,priority=1000,enable={{is_default_branch}}
          type=schedule,pattern={{date 'YYYYMMDD'}}
          type=raw,value=edge,prefix=,priority=700
          type=ref,enable=true,priority=600,prefix=,suffix=,event=tag
          type=sha,enable=true,priority=100,prefix=,suffix=,format=short

    # https://github.com/docker/build-push-action
    -
      name: 🚀 ${{ inputs.build-target }} (${{ inputs.platforms }})
      if: ${{ inputs.publish == 'true' }}
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile.composite
        target: o100hellos_${{ inputs.language }}
        platforms: ${{ inputs.platforms }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-to: |
          type=gha,mode=max
        cache-from: |
          type=gha,mode=max
          type=registry,ref=${{ inputs.dockerhub-username }}/${{ inputs.language }}:latest,mode=max

    -
      name: Determine if language has documentation to publish
      id: has-docs
      shell: bash
      run: |
        # Multiline string outputted to a file
        # https://stackoverflow.com/a/23930212/9023855
        cat << EOF
        # Hello World! From ${{ inputs.language }}.

        This image is built from the **[100hellos/${{ inputs.language }}](https://github.com/frison/100hellos/tree/main/${{ inputs.language }})** directory.

        You can give it a whirl by running:
        ```
        # Build, run, or interpret the language's version of "Hello World!" and output it
        docker run --rm 100hellos/${{ inputs.language }}:latest

        # You can enter the container and poke around, a good place to start?
        # `cat /entrypoint.sh`
        docker run --rm --entrypoint="" -it 100hellos/${{ inputs.language }} zsh
        ```
        EOF > ./${{ inputs.language }}/README-Generated.md

        # Check if the repo has a README.md for publication, and if so append it to the generated text
        if [ -f "./${{ inputs.language }}/README.md" ]; then
          cat ./${{ inputs.language }}/README.md >> ./${{ inputs.language }}/README-Generated.md
        fi



    -
      name: 🖋 Docker Hub
      uses: peter-evans/dockerhub-description@5862ccd54c82fd1a0e6c5533916f2c53ddc5d25f
      # Check if the repo has a README.md for publication, and if so update the
      # description on Docker Hub.
      with:
        username: ${{ inputs.dockerhub-username }}
        password: ${{ inputs.dockerhub-token }}
        repository: 100hellos/${{ inputs.language }}
        short-description: "Hello World! ${{ inputs.language }} image"
        readme-filepath: ./${{ inputs.language }}/README-Generated.md
